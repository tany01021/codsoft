import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Scanner;
import java.util.StringTokenizer;

public class WordCounter {

    private static final HashSet<String> stopWords = new HashSet<>();
    private static final HashMap<String, Integer> wordFrequency = new HashMap<>();

    static {
        
        String[] commonStopWords = {"a", "an", "the", "and", "or", "but", "if", "to", "of", "in", "on", "for", "with", "as", "by", "is", "it", "are", "was", "were", "be", "this", "that", "which", "at", "from"};
        for (String word : commonStopWords) {
            stopWords.add(word);
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter text or the path to a text file:");
        String input = scanner.nextLine();

        String content = readInput(input);
        if (content != null) {
            countWords(content);
            displayStatistics();
        } else {
            System.out.println("Error reading input.");
        }
    }

    private static String readInput(String input) {
        StringBuilder content = new StringBuilder();
        try (BufferedReader reader = new BufferedReader(new FileReader(input))) {
            String line;
            while ((line = reader.readLine()) != null) {
                content.append(line).append(" ");
            }
        } catch (IOException e) {
            // If input is not a file, use the input text directly
            content.append(input);
        }

        return content.toString().trim();
    }

    private static void countWords(String text) {
        StringTokenizer tokenizer = new StringTokenizer(text, " .,;:!?()[]{}\"'\n\t\r");

        while (tokenizer.hasMoreTokens()) {
            String word = tokenizer.nextToken().toLowerCase();
            if (!stopWords.contains(word)) {
                wordFrequency.put(word, wordFrequency.getOrDefault(word, 0) + 1);
            }
        }
    }

    private static void displayStatistics() {
        int totalWords = wordFrequency.values().stream().mapToInt(Integer::intValue).sum();
        int uniqueWords = wordFrequency.size();

        System.out.println("Total word count (excluding stop words): " + totalWords);
        System.out.println("Number of unique words: " + uniqueWords);

        System.out.println("\nWord frequencies:");
        for (Map.Entry<String, Integer> entry : wordFrequency.entrySet()) {
            System.out.println(entry.getKey() + ": " + entry.getValue());
        }
    }
}
